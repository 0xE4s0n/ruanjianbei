package cuit.xsgw.base.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import cuit.xsgw.base.db.table.Status;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "gongweiOS_status".
 */
public class StatusDao extends AbstractDao<Status, Long> {

    public static final String TABLENAME = "gongweiOS_status";

    /**
     * Properties of entity Status.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Version = new Property(1, String.class, "version", false, "version");
        public final static Property Status = new Property(2, int.class, "status", false, "status");
        public final static Property AccountType = new Property(3, String.class, "accountType", false, "accountType");
        public final static Property AccountId = new Property(4, String.class, "accountId", false, "account_id");
    }


    public StatusDao(DaoConfig config) {
        super(config);
    }

    public StatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"gongweiOS_status\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"version\" TEXT NOT NULL ," + // 1: version
                "\"status\" INTEGER NOT NULL ," + // 2: status
                "\"accountType\" TEXT," + // 3: accountType
                "\"account_id\" TEXT);"); // 4: accountId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"gongweiOS_status\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Status entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVersion());
        stmt.bindLong(3, entity.getStatus());

        String accountType = entity.getAccountType();
        if (accountType != null) {
            stmt.bindString(4, accountType);
        }

        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(5, accountId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Status entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVersion());
        stmt.bindLong(3, entity.getStatus());

        String accountType = entity.getAccountType();
        if (accountType != null) {
            stmt.bindString(4, accountType);
        }

        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(5, accountId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Status readEntity(Cursor cursor, int offset) {
        Status entity = new Status( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // version
                cursor.getInt(offset + 2), // status
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accountType
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // accountId
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Status entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVersion(cursor.getString(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
        entity.setAccountType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccountId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    @Override
    protected final Long updateKeyAfterInsert(Status entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Status entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Status entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
